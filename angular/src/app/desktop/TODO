ok maintenant il faut remplacer le nz-table de estates par ux-table.

Ce serait l'occasion de créer d'abord une facade par exemple un objet business.
Cet objet gèreral l'interaction avec le store et fournira au composant EstateTable le tableau en tant qu'objet JS.

Prenons l'exmemple de l'appel du rentsService pour créer une quittance.
Comment est-ce que ça se passe?

1- ux-table va ouvrir la commande passé dans l'objet JS.
...bah en fait c'est tout ?
Eh non!

il va falloir gérer toutes les popups imbriquées de création de quittance par exemple.
téléchargement d'une quittance personnalisée -> on ouvre la popup avec l'input.

Bon au final, on peut déjà par exemple reprendre le composant LodgerComponent et le transformer en service.
Un service qui se contera de gérer comment faire les quittance, en l'occurance via des popups.

Ce service pourrait être dans business ?
Business doit il être un service?


Ok la couche business ne doit pas remplacer le composant.

Le composant doit tout de même gérer les interractions.

Par exemple si l'utilisateur modifie le champ "charges", le composant réceptionne l'action.
Il fait donc appel au business pour updater la valeur.
En principe, le business, conecté au store, met a jour de façon asynchrone le tableau envoyé au composant et la donnée est alors mise à jour pour de vrai.

Dans le cas d'une commande de type créer une quittance personnalisée.
L'appel doit-il être fait dans la couche business ?

Est-ce que je ne confond pas la couche business qui gère les données brutes avec le fait de convertir ces données en tableau?

Finalement, la conversion de ces données en tableau ne devrait-elle pas se faire dans le composant?
Via par exemple des fichiers utils.

Sinon on mélange tout.
On aurait donc une couche business pour gérer l'interraction avec le store (et donc le serveur car ça peut être autre chose qu'un store, il s'agit d'une façade).
Et une couche ux dans le composant qui elle va préparer le tableau pour le composant.

Ce serait par exemple un service estate-table-ux.ts qui ferait appel a business.estate.ts.
Il aurait une fonction createTable() qui renvoie le tableau a utiliser dans le composant.

Oui mais pour createTable il faut utiliser les services pour configurer les commandes...
C'est pas plutôt du business ça?
Pas vraiment...mais ce n'est pas non plus du ux.




Pour résumer.

On aurait un service business = façade, qui gère les données.
Un service ux qui var transformer ces données en tableau affichable.

Quel est le problème de mettre les interactions avec d'autres services comme la création de quittance personnalisée dans la couche ux ?

En fait le nom ux est peut être mal choisi.
IL faudrait plutôt quelque chose comme utils...
Mais j'aime pas trop.
C'est vague.

Bon une chose ne tout cas c'est plutôt la responsabilité du composant de faire ça.
Et celà reste assez personnel au composant. Ce comportement n'a pas besoin d'être mutualisé alors que la couche business si (ou en tout cas il y a une utilité à ça).

Donc on pourrait partir sur un composant avec une class utils...
ah mais...la gestion des quittances par exemple serait alors un service appelé dans le composant.

Et si on avait plutôt plusieurs couches business ?

Comme par exemple business-ux, business-data.
Business ux gèrerait par exemple l'ouverture des popups.
et business-data le store.


///

OK
ON pourrait avoir donc une façade qui gère le store.
Une couche business qui créer les objets riches comme le tableau avec indirrectement les popups par exemple.
Enfin un service qui combine les deux ou alors utiliser ça dirrectement dans le composant.

OK c'est good, on part là dessus!
