version: '3.8'

services:
  postgres:
    image: postgres:13-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - "5432:5432"
    networks:
      - prod
    volumes:
      - pg_data:/var/lib/postgresql/data

  nestjs:
    container_name: back
    build:
      context: ./nestjs
      dockerfile: Dockerfile
    env_file:
      - ./nestjs/.env.production
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
    ports:
      - "3000:3000"
    networks:
      - prod
    depends_on:
      - postgres

  nginx:
    container_name: nginx
    build:
      context: ./angular
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nestjs
    networks:
      - prod
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - prod
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  prod:
    driver: bridge

volumes:
  pg_data:
  certbot_conf:
  certbot_www: